{"version":3,"sources":["Toast/index.jsx","Button/index.jsx","Options/index.jsx","App.js","toastReducer.js","serviceWorker.js","index.js"],"names":["timeout","Toast","props","children","isOpen","duration","title","description","hasCloseBtn","autoDismiss","closeCallback","classNames","useState","isOpenState","setOpen","onClose","useCallback","useEffect","clearTimeout","setTimeout","className","cx","onClick","Button","text","TOAST_NO_REDUX_DURATION","connect","toastOptions","setToast","txt","map","options","addOptions","href","store","createStore","combineReducers","ToastReducer","state","action","type","data","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.421d0649.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport cx from \"classnames\";\n\nimport \"./style.css\";\n\nlet timeout = null;\n\nexport default function Toast(props) {\n  const {\n    children,\n    isOpen = false,\n    duration = 2000,\n    title,\n    description,\n    hasCloseBtn = false,\n    autoDismiss = true,\n    closeCallback = null,\n    classNames = []\n  } = props;\n\n  const [isOpenState, setOpen] = useState(false);\n\n  const onClose = useCallback(() => {\n    setOpen(false);\n    if (closeCallback) closeCallback();\n  }, [closeCallback, setOpen]);\n\n  useEffect(() => {\n    setOpen(isOpen);\n    if (isOpen && autoDismiss) {\n      if (timeout) clearTimeout(timeout);\n      timeout = setTimeout(onClose, duration);\n    }\n  }, [isOpen, duration, autoDismiss, onClose]);\n\n  return (\n    <div className={cx([\"ReactToast\", { isOpen: isOpenState }, ...classNames])}>\n      {title && <h2 className=\"ReactToast--title\">{title}</h2>}\n      {description && (\n        <div className=\"ReactToast--description\">{description}</div>\n      )}\n      {children}\n      {hasCloseBtn && (\n        <button className=\"ReactToast--close\" onClick={onClose}>\n          &times;\n        </button>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./style.css\";\n\nexport default function Button(props) {\n  const { onClick, classNames, text } = props;\n\n  return (\n    <button\n      onClick={onClick}\n      className={`Button${classNames ? ` ${classNames}` : \"\"}`}\n    >\n      <span>{text}</span>\n    </button>\n  );\n}\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n// import toastActions from \"../toastActions\";\n// import ToastContainer from \"../ToastContainer\";\nimport Toast from \"../Toast\";\nimport Button from \"../Button\";\n\nimport \"./style.css\";\n\nconst TOAST_NO_REDUX_DURATION = 5000;\nlet timeout = null;\n\nfunction Options(props) {\n  // const { dispatch } = props;\n  const [toastOptions, setToast] = useState({\n    isOpen: false\n  });\n\n  const {\n    isOpen,\n    autoDismiss,\n    hasCloseBtn,\n    description,\n    classNames,\n    text: txt\n  } = toastOptions;\n\n  const addOptions = options => {\n    if (timeout) clearTimeout(timeout);\n\n    setToast({\n      isOpen: false\n    });\n\n    timeout = setTimeout(() => {\n      setToast(options);\n    }, 500);\n  };\n\n  const data = [\n    {\n      isOpen: true,\n      description: \"Dunc the Lunk, thick as a castle wall.\",\n      autoDismiss: true,\n      text: \"Dimiss\"\n    },\n    {\n      isOpen: true,\n      autoDismiss: false,\n      description: \"To close this toast, press x.\",\n      hasCloseBtn: true,\n      text: \"No Dimiss\"\n    },\n    {\n      isOpen: true,\n      description: \"Your action has been completed.\",\n      autoDismiss: true,\n      classNames: [\"success\"],\n      text: \"Success\"\n    },\n    {\n      isOpen: true,\n      description: \"Uh oh. There's something wrong.\",\n      classNames: [\"error\"],\n      hasCloseBtn: true,\n      autoDismiss: false,\n      text: \"Error\"\n    },\n    {\n      isOpen: true,\n      description: \"Some info is in here.\",\n      autoDismiss: true,\n      classNames: [\"info\"],\n      text: \"Info\"\n    },\n    {\n      isOpen: true,\n      description: \"There might be something wrong.\",\n      autoDismiss: true,\n      classNames: [\"warning\"],\n      text: \"Warning\"\n    }\n  ];\n\n  return (\n    <header className=\"App-header\">\n      <h1>React Toast Pure Component</h1>\n      <Toast\n        isOpen={isOpen}\n        title={`${txt ? ` ${txt}` : \"\"} Notification 🍞`}\n        description={description}\n        autoDismiss={autoDismiss}\n        hasCloseBtn={hasCloseBtn}\n        duration={TOAST_NO_REDUX_DURATION}\n        closeCallback={() =>\n          setToast({\n            isOpen: false,\n            description,\n            text: txt\n          })\n        }\n        classNames={classNames}\n      />\n      <div className=\"Options--buttons\">\n        {data.map(options => {\n          const { text } = options;\n          return (\n            <>\n              <Button\n                classNames=\"btn striped-shadow dark\"\n                onClick={() => addOptions(options)}\n                text={text}\n              />\n            </>\n          );\n        })}\n      </div>\n      {/* <ToastContainer /> */}\n      {/* <button\n        onClick={() =>\n          dispatch(\n            toastActions.addToast({\n              title: \"Added\",\n              description: \"Your item was added.\",\n              duration: \"5000\"\n            })\n          )\n        }\n      >\n        ToastContainer\n      </button> */}\n      <p>\n        <b>Github:</b>{\" \"}\n        <a href=\"https://github.com/tumfoodery/react-toast-component\">\n          https://github.com/tumfoodery/react-toast-component\n        </a>\n      </p>\n      <p>\n        <b>NPM:</b>{\" \"}\n        <a href=\"https://www.npmjs.com/package/react-toast-component\">\n          https://www.npmjs.com/package/react-toast-component\n        </a>\n      </p>\n    </header>\n  );\n}\n\nexport default connect()(Options);\n","import React from \"react\";\nimport Options from \"./Options\";\nimport { Provider } from \"react-redux\";\nimport { createStore, combineReducers } from \"redux\";\nimport ToastReducer from \"./toastReducer\";\nimport \"./App.css\";\n\nconst store = createStore(combineReducers({ ToastReducer }));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Options />\n    </Provider>\n  );\n}\n\nexport default App;\n","export default function toastReducer(state = {}, action) {\n  switch (action.type) {\n    case \"SHOW_TOAST\":\n      return {\n        isOpen: true,\n        ...action.data\n      };\n    case \"HIDE_TOAST\":\n      return {\n        isOpen: false\n      };\n    default:\n      return state;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}